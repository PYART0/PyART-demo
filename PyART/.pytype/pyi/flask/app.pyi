# (generated with --quick)

import datetime
import flask.config
import flask.helpers
import flask.json
import flask.scaffold
import flask.sessions
import flask.templating
import flask.wrappers
import itertools
import logging
import threading
from typing import Any, Callable, Dict, IO, List, NoReturn, Optional, Tuple, Type, TypeVar, Union
import werkzeug.datastructures
import werkzeug.local

AppContext: Any
BadRequest: Any
BadRequestKeyError: Any
BaseResponse: Any
BuildError: Any
Config: Type[flask.config.Config]
ConfigAttribute: Type[flask.config.ConfigAttribute]
DispatchingJinjaLoader: Type[flask.templating.DispatchingJinjaLoader]
Environment: Type[flask.templating.Environment]
HTTPException: Any
Headers: Type[werkzeug.datastructures.Headers]
ImmutableDict: Type[werkzeug.datastructures.ImmutableDict]
InternalServerError: Any
Lock: Type[threading.Lock]
Map: Any
Request: Type[flask.wrappers.Request]
RequestContext: Any
RequestRedirect: Any
Response: Type[flask.wrappers.Response]
RoutingException: Any
Rule: Any
Scaffold: Type[flask.scaffold.Scaffold]
SecureCookieSessionInterface: Type[flask.sessions.SecureCookieSessionInterface]
_AppCtxGlobals: Any
_request_ctx_stack: werkzeug.local.LocalStack
_sentinel: Any
appcontext_tearing_down: Any
chain: Type[itertools.chain]
cli: module
g: werkzeug.local.LocalProxy
got_request_exception: Any
json: module
locked_cached_property: Type[flask.helpers.locked_cached_property]
os: module
request: werkzeug.local.LocalProxy
request_finished: Any
request_started: Any
request_tearing_down: Any
session: werkzeug.local.LocalProxy
sys: module
timedelta: Type[datetime.timedelta]

_T0 = TypeVar('_T0')

class Flask(flask.scaffold.Scaffold):
    __doc__: str
    _before_request_lock: threading.Lock
    _blueprint_order: List[nothing]
    _got_first_request: bool
    add_template_filter: Callable
    add_template_global: Callable
    add_template_test: Callable
    add_url_rule: Callable
    app_ctx_globals_class: Any
    before_first_request: Callable
    before_first_request_funcs: List[nothing]
    blueprints: Dict[nothing, nothing]
    config: Any
    config_class: Type[flask.config.Config]
    debug: Any
    default_config: werkzeug.datastructures.ImmutableDict[str, Optional[Union[int, str, datetime.timedelta]]]
    env: Any
    extensions: Dict[nothing, nothing]
    got_first_request: Any
    import_name: None
    instance_path: Any
    jinja_env: Any
    jinja_environment: Type[flask.templating.Environment]
    jinja_options: Dict[str, List[str]]
    json_decoder: Type[flask.json.JSONDecoder]
    json_encoder: Type[flask.json.JSONEncoder]
    logger: Any
    name: Any
    permanent_session_lifetime: Any
    preserve_context_on_exception: Any
    propagate_exceptions: Any
    register_blueprint: Callable
    request_class: Type[flask.wrappers.Request]
    response_class: Type[flask.wrappers.Response]
    root_path: None
    secret_key: Any
    send_file_max_age_default: Any
    session_cookie_name: Any
    session_interface: flask.sessions.SecureCookieSessionInterface
    shell_context_processor: Callable
    shell_context_processors: List[nothing]
    subdomain_matching: Any
    teardown_appcontext: Callable
    teardown_appcontext_funcs: List[nothing]
    template_filter: Callable
    template_folder: None
    template_global: Callable
    template_test: Callable
    templates_auto_reload: Any
    test_cli_runner_class: None
    test_client_class: None
    testing: Any
    url_build_error_handlers: List[nothing]
    url_map: Any
    url_map_class: Any
    url_rule_class: Any
    use_x_sendfile: Any
    def __call__(self, environ, start_response) -> Any: ...
    def __init__(self, import_name, static_url_path = ..., static_folder = ..., static_host = ..., host_matching = ..., subdomain_matching = ..., template_folder = ..., instance_path = ..., instance_relative_config = ..., root_path = ...) -> None: ...
    def __repr__(self) -> str: ...
    def _find_error_handler(self, e) -> None: ...
    def _is_setup_finished(self) -> Any: ...
    def app_context(self) -> Any: ...
    def auto_find_instance_path(self) -> str: ...
    def create_global_jinja_loader(self) -> flask.templating.DispatchingJinjaLoader: ...
    def create_jinja_environment(self) -> flask.templating.Environment: ...
    def create_url_adapter(self, request) -> Any: ...
    def dispatch_request(self) -> Any: ...
    def do_teardown_appcontext(self, exc = ...) -> None: ...
    def do_teardown_request(self, exc = ...) -> None: ...
    def finalize_request(self, rv, from_error_handler = ...) -> Any: ...
    def full_dispatch_request(self) -> Any: ...
    def handle_exception(self, e) -> Any: ...
    def handle_http_exception(self, e) -> Any: ...
    def handle_url_build_error(self, error, endpoint, values) -> Any: ...
    def handle_user_exception(self, e) -> Any: ...
    def inject_url_defaults(self, endpoint, values) -> None: ...
    def iter_blueprints(self) -> listiterator[nothing]: ...
    def log_exception(self, exc_info) -> None: ...
    def make_config(self, instance_relative = ...) -> flask.config.Config: ...
    def make_default_options_response(self) -> flask.wrappers.Response: ...
    def make_response(self, rv) -> Any: ...
    def make_shell_context(self) -> dict: ...
    def open_instance_resource(self, resource, mode = ...) -> IO[Union[bytes, str]]: ...
    def preprocess_request(self) -> None: ...
    def process_response(self, response) -> Any: ...
    def raise_routing_exception(self, request) -> NoReturn: ...
    def request_context(self, environ) -> Any: ...
    def run(self, host = ..., port = ..., debug = ..., load_dotenv = ..., **options) -> None: ...
    def select_jinja_autoescape(self, filename) -> Any: ...
    def should_ignore_error(self, error) -> bool: ...
    def test_cli_runner(self, **kwargs) -> Any: ...
    def test_client(self, use_cookies = ..., **kwargs) -> Any: ...
    def test_request_context(self, *args, **kwargs) -> Any: ...
    def trap_http_exception(self, e) -> bool: ...
    def try_trigger_before_first_request_functions(self) -> None: ...
    def update_template_context(self, context) -> None: ...
    def wsgi_app(self, environ, start_response) -> Any: ...

def _endpoint_from_view_func(view_func) -> Any: ...
def _make_timedelta(value: _T0) -> Union[datetime.timedelta, _T0]: ...
def create_logger(app) -> logging.Logger: ...
def find_package(import_name) -> Tuple[Any, Any]: ...
def get_debug_flag() -> Any: ...
def get_env() -> str: ...
def get_flashed_messages(with_categories = ..., category_filter = ...) -> Any: ...
def get_load_dotenv(default: _T0 = ...) -> Union[bool, _T0]: ...
def jsonify(*args, **kwargs) -> Any: ...
def setupmethod(f) -> Callable: ...
def url_for(endpoint, **values) -> Any: ...
