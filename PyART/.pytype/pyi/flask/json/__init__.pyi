# (generated with --quick)

import json.decoder
import json.encoder
import markupsafe
from typing import Any, Optional, Type, Union
import werkzeug.local

Markup: Type[markupsafe.Markup]
_htmlsafe_map: dict
_json: module
current_app: werkzeug.local.LocalProxy
dataclasses: Optional[module]
date: Type[datetime.date]
datetime: Type[datetime.datetime]
io: module
request: werkzeug.local.LocalProxy
uuid: module
warnings: module

class JSONDecoder(json.decoder.JSONDecoder):
    __doc__: str

class JSONEncoder(json.encoder.JSONEncoder):
    __doc__: str
    def default(self, o) -> Any: ...

def _dump_arg_defaults(kwargs, app = ...) -> None: ...
def _load_arg_defaults(kwargs, app = ...) -> None: ...
def dump(obj, fp, app = ..., **kwargs) -> None: ...
def dumps(obj, app = ..., **kwargs) -> Union[bytes, str]: ...
def htmlsafe_dump(obj, fp, **kwargs) -> None: ...
def htmlsafe_dumps(obj, **kwargs) -> Any: ...
def http_date(timestamp: Optional[Union[float, datetime.datetime]] = ...) -> str: ...
def jsonify(*args, **kwargs) -> Any: ...
def load(fp, app = ..., **kwargs) -> Any: ...
def loads(s, app = ..., **kwargs) -> Any: ...
def tojson_filter(obj, **kwargs) -> markupsafe.Markup: ...
