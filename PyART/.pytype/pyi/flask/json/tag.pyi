# (generated with --quick)

import markupsafe
from typing import Any, Dict, List, NoReturn, Optional, Type, Union
import uuid

Markup: Type[markupsafe.Markup]
UUID: Type[uuid.UUID]
datetime: Type[datetime.datetime]

class JSONTag:
    __slots__ = ["serializer"]
    __doc__: str
    key: None
    serializer: Any
    def __init__(self, serializer) -> None: ...
    def check(self, value) -> NoReturn: ...
    def tag(self, value) -> dict: ...
    def to_json(self, value) -> NoReturn: ...
    def to_python(self, value) -> NoReturn: ...

class PassDict(JSONTag):
    __slots__ = []
    serializer: Any
    def check(self, value) -> bool: ...
    def tag(self, value) -> Any: ...
    def to_json(self, value) -> Any: ...

class PassList(JSONTag):
    __slots__ = []
    serializer: Any
    def check(self, value) -> bool: ...
    def tag(self, value) -> Any: ...
    def to_json(self, value) -> Any: ...

class TagBytes(JSONTag):
    __slots__ = []
    key: str
    serializer: Any
    def check(self, value) -> bool: ...
    def to_json(self, value) -> str: ...
    def to_python(self, value) -> bytes: ...

class TagDateTime(JSONTag):
    __slots__ = []
    key: str
    serializer: Any
    def check(self, value) -> bool: ...
    def to_json(self, value) -> str: ...
    def to_python(self, value) -> Optional[datetime.datetime]: ...

class TagDict(JSONTag):
    __slots__ = []
    __doc__: str
    key: str
    serializer: Any
    def check(self, value) -> bool: ...
    def to_json(self, value) -> Dict[str, Any]: ...
    def to_python(self, value) -> dict: ...

class TagMarkup(JSONTag):
    __slots__ = []
    __doc__: str
    key: str
    serializer: Any
    def check(self, value) -> bool: ...
    def to_json(self, value) -> str: ...
    def to_python(self, value) -> markupsafe.Markup: ...

class TagTuple(JSONTag):
    __slots__ = []
    key: str
    serializer: Any
    def check(self, value) -> bool: ...
    def to_json(self, value) -> Any: ...
    def to_python(self, value) -> tuple: ...

class TagUUID(JSONTag):
    __slots__ = []
    key: str
    serializer: Any
    def check(self, value) -> bool: ...
    def to_json(self, value) -> Any: ...
    def to_python(self, value) -> uuid.UUID: ...

class TaggedJSONSerializer:
    __slots__ = ["order", "tags"]
    __doc__: str
    default_tags: List[type]
    order: list
    tags: dict
    def __init__(self) -> None: ...
    def dumps(self, value) -> Union[bytes, str]: ...
    def loads(self, value) -> Any: ...
    def register(self, tag_class, force = ..., index = ...) -> None: ...
    def tag(self, value) -> Any: ...
    def untag(self, value) -> Any: ...

def b64decode(s: Union[bytes, str], altchars: Optional[bytes] = ..., validate: bool = ...) -> bytes: ...
def b64encode(s: bytes, altchars: Optional[bytes] = ...) -> bytes: ...
def dumps(obj, app = ..., **kwargs) -> Union[bytes, str]: ...
def http_date(timestamp: Optional[Union[float, datetime.datetime]] = ...) -> str: ...
def loads(s, app = ..., **kwargs) -> Any: ...
def parse_date(value: Optional[str]) -> Optional[datetime.datetime]: ...
