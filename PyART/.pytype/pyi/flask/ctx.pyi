# (generated with --quick)

from typing import Any, Callable, List, Sequence, Type, TypeVar
import werkzeug.exceptions
import werkzeug.local

HTTPException: Type[werkzeug.exceptions.HTTPException]
_app_ctx_stack: werkzeug.local.LocalStack
_request_ctx_stack: werkzeug.local.LocalStack
_sentinel: Any
appcontext_popped: Any
appcontext_pushed: Any
sys: module

_T0 = TypeVar('_T0')
_TAppContext = TypeVar('_TAppContext', bound=AppContext)
_TRequestContext = TypeVar('_TRequestContext', bound=RequestContext)

class AppContext:
    __doc__: str
    _refcnt: int
    app: Any
    g: Any
    url_adapter: Any
    def __enter__(self: _TAppContext) -> _TAppContext: ...
    def __exit__(self, exc_type, exc_value, tb) -> None: ...
    def __init__(self, app) -> None: ...
    def pop(self, exc = ...) -> None: ...
    def push(self) -> None: ...

class RequestContext:
    __doc__: str
    _after_request_functions: List[nothing]
    _implicit_app_ctx_stack: list
    _preserved_exc: Any
    app: Any
    flashes: None
    g: Any
    preserved: bool
    request: Any
    session: Any
    url_adapter: Any
    def __enter__(self: _TRequestContext) -> _TRequestContext: ...
    def __exit__(self, exc_type, exc_value, tb) -> None: ...
    def __init__(self, app, environ, request = ..., session = ...) -> None: ...
    def __repr__(self) -> str: ...
    def auto_pop(self, exc) -> None: ...
    def copy(self: _TRequestContext) -> _TRequestContext: ...
    def match_request(self) -> None: ...
    def pop(self, exc = ...) -> None: ...
    def push(self) -> None: ...

class _AppCtxGlobals:
    __doc__: str
    def __contains__(self, item) -> bool: ...
    def __iter__(self) -> `dictionary-keyiterator`[str]: ...
    def __repr__(self) -> str: ...
    def get(self, name, default = ...) -> Any: ...
    def pop(self, name, default = ...) -> Any: ...
    def setdefault(self, name, default = ...) -> Any: ...

def after_this_request(f: _T0) -> _T0: ...
def copy_current_request_context(f) -> Callable: ...
def has_app_context() -> bool: ...
def has_request_context() -> bool: ...
def update_wrapper(wrapper: Callable, wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable: ...
