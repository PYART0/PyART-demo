# (generated with --quick)

import jinja2.environment
import jinja2.exceptions
import jinja2.loaders
from typing import Any, Dict, Generator, Tuple, Type
import werkzeug.local

BaseEnvironment: Type[jinja2.environment.Environment]
BaseLoader: Type[jinja2.loaders.BaseLoader]
TemplateNotFound: Type[jinja2.exceptions.TemplateNotFound]
_app_ctx_stack: werkzeug.local.LocalStack
_request_ctx_stack: werkzeug.local.LocalStack
before_render_template: Any
template_rendered: Any

class DispatchingJinjaLoader(jinja2.loaders.BaseLoader):
    __doc__: str
    app: Any
    def __init__(self, app) -> None: ...
    def _get_source_explained(self, environment, template) -> Any: ...
    def _get_source_fast(self, environment, template) -> Any: ...
    def _iter_loaders(self, template) -> Generator[Tuple[Any, Any], Any, None]: ...
    def get_source(self, environment, template) -> Any: ...
    def list_templates(self) -> list: ...

class Environment(jinja2.environment.Environment):
    __doc__: str
    app: Any
    def __init__(self, app, **options) -> None: ...

def _default_template_ctx_processor() -> Dict[str, Any]: ...
def _render(template, context, app) -> Any: ...
def render_template(template_name_or_list, **context) -> Any: ...
def render_template_string(source, **context) -> Any: ...
