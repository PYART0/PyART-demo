# (generated with --quick)

import flask.json.tag
import itsdangerous
import typing
from typing import Any, NoReturn, Optional, Type, TypeVar, Union
import werkzeug.datastructures

BadSignature: Type[itsdangerous.BadSignature]
CallbackDict: Type[werkzeug.datastructures.CallbackDict]
MutableMapping: Type[typing.MutableMapping]
TaggedJSONSerializer: Type[flask.json.tag.TaggedJSONSerializer]
URLSafeTimedSerializer: Type[itsdangerous.URLSafeTimedSerializer]
datetime: Type[datetime.datetime]
hashlib: module
is_ip: Any
session_json_serializer: flask.json.tag.TaggedJSONSerializer
total_seconds: Any
warnings: module

_T1 = TypeVar('_T1')

class NullSession(SecureCookieSession):
    __doc__: str
    _fail: Any
    def __delitem__(self, *args, **kwargs) -> NoReturn: ...
    def __setitem__(self, *args, **kwargs) -> NoReturn: ...
    def clear(self, *args, **kwargs) -> NoReturn: ...
    def pop(self, *args, **kwargs) -> NoReturn: ...
    def popitem(self, *args, **kwargs) -> NoReturn: ...
    def setdefault(self, *args, **kwargs) -> NoReturn: ...
    def update(self, *args, **kwargs) -> NoReturn: ...

class SecureCookieSession(werkzeug.datastructures.CallbackDict, SessionMixin):
    __doc__: str
    accessed: bool
    modified: bool
    def __getitem__(self, key) -> Any: ...
    def __init__(self, initial = ...) -> None: ...
    def get(self, key, default: _T1 = ...) -> _T1: ...
    def setdefault(self, key, default = ...) -> Any: ...

class SecureCookieSessionInterface(SessionInterface):
    __doc__: str
    key_derivation: str
    salt: str
    serializer: flask.json.tag.TaggedJSONSerializer
    session_class: Type[SecureCookieSession]
    @staticmethod
    def digest_method(__string: Union[bytearray, bytes, memoryview] = ...) -> hashlib._Hash: ...
    def get_signing_serializer(self, app) -> Optional[itsdangerous.URLSafeTimedSerializer]: ...
    def open_session(self, app, request) -> Optional[SecureCookieSession]: ...
    def save_session(self, app, session, response) -> None: ...

class SessionInterface:
    __doc__: str
    null_session_class: Type[NullSession]
    pickle_based: bool
    def get_cookie_domain(self, app) -> Any: ...
    def get_cookie_httponly(self, app) -> Any: ...
    def get_cookie_name(self, app) -> Any: ...
    def get_cookie_path(self, app) -> Any: ...
    def get_cookie_samesite(self, app) -> Any: ...
    def get_cookie_secure(self, app) -> Any: ...
    def get_expiration_time(self, app, session) -> Optional[datetime.datetime]: ...
    def is_null_session(self, obj) -> bool: ...
    def make_null_session(self, app) -> NullSession: ...
    def open_session(self, app, request) -> NoReturn: ...
    def save_session(self, app, session, response) -> NoReturn: ...
    def should_set_cookie(self, app, session) -> Any: ...

class SessionMixin(typing.MutableMapping):
    __doc__: str
    accessed: bool
    modified: bool
    new: bool
    permanent: Any
