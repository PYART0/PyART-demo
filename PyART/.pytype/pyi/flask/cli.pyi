# (generated with --quick)

import click.core
import click.exceptions
import click.types
import threading
import types
from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Type, TypeVar, Union
import werkzeug.local

Lock: Type[threading.Lock]
Thread: Type[threading.Thread]
ast: module
cli: FlaskGroup
click: module
current_app: werkzeug.local.LocalProxy
dotenv: Any
import_string: Any
inspect: module
os: module
pass_script_info: Callable[[Any], Any]
platform: module
re: module
routes_command: click.core.Command
run_command: click.core.Command
shell_command: click.core.Command
ssl: Optional[module]
sys: module
traceback: module
version_option: click.core.Option
warnings: module

_T0 = TypeVar('_T0')
_T2 = TypeVar('_T2')

class AppGroup(click.core.Group):
    __doc__: str
    def command(self, *args, **kwargs) -> Callable[[Any], Any]: ...
    def group(self, *args, **kwargs) -> Callable[[Callable], click.core.Group]: ...

class CertParamType(click.core._ParamType):
    __doc__: str
    name: str
    path_type: click.types.Path
    def __init__(self) -> None: ...
    def convert(self, value, param, ctx) -> Any: ...

class DispatchingApp:
    __doc__: str
    _app: Any
    _bg_loading_exc_info: Optional[Tuple[Optional[Type[BaseException]], Optional[BaseException], Optional[types.TracebackType]]]
    _lock: threading.Lock
    loader: Any
    def __call__(self, environ, start_response) -> Any: ...
    def __init__(self, loader, use_eager_loading = ...) -> None: ...
    def _flush_bg_loading_exception(self) -> None: ...
    def _load_in_background(self) -> None: ...
    def _load_unlocked(self) -> Any: ...

class FlaskGroup(AppGroup):
    __doc__: str
    _loaded_plugin_commands: bool
    create_app: Any
    load_dotenv: Any
    set_debug_flag: Any
    def __init__(self, add_default_commands = ..., create_app = ..., add_version_option = ..., load_dotenv = ..., set_debug_flag = ..., **extra) -> None: ...
    def _load_plugin_commands(self) -> None: ...
    def get_command(self, ctx, name) -> Any: ...
    def list_commands(self, ctx) -> list: ...
    def main(self, *args, **kwargs) -> Any: ...

class NoAppException(click.exceptions.UsageError):
    __doc__: str

class ScriptInfo:
    __doc__: str
    _loaded_app: Any
    app_import_path: Any
    create_app: Any
    data: Dict[nothing, nothing]
    set_debug_flag: Any
    def __init__(self, app_import_path = ..., create_app = ..., set_debug_flag = ...) -> None: ...
    def load_app(self) -> Any: ...

class SeparatedPathType(click.types.Path):
    __doc__: str
    def convert(self, value, param, ctx) -> Any: ...

def _called_with_wrong_args(f) -> bool: ...
def _path_is_ancestor(path, other) -> Any: ...
def _validate_key(ctx, param, value: _T2) -> _T2: ...
def attrgetter(*attrs: str) -> Callable[[Any], tuple]: ...
def call_factory(script_info, app_factory, args = ..., kwargs = ...) -> Any: ...
def find_app_by_string(script_info, module, app_name) -> Any: ...
def find_best_app(script_info, module) -> Any: ...
def get_debug_flag() -> Any: ...
def get_env() -> str: ...
def get_load_dotenv(default: _T0 = ...) -> Union[bool, _T0]: ...
def get_version(ctx, param, value) -> None: ...
def load_dotenv(path = ...) -> Any: ...
def locate_app(script_info, module_name, app_name, raise_if_not_found = ...) -> Any: ...
def main(as_module = ...) -> None: ...
def prepare_import(path) -> str: ...
def show_server_banner(env, debug, app_import_path, eager_loading) -> None: ...
def update_wrapper(wrapper: Callable, wrapped: Callable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> Callable: ...
def with_appcontext(f) -> Callable: ...
